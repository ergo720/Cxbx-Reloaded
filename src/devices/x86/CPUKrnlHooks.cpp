// This is an open source non-commercial project. Dear PVS-Studio, please check it.
// PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com
// ******************************************************************
// *
// *  This file is part of the Cxbx project.
// *
// *  Cxbx and Cxbe are free software; you can redistribute them
// *  and/or modify them under the terms of the GNU General Public
// *  License as published by the Free Software Foundation; either
// *  version 2 of the license, or (at your option) any later version.
// *
// *  This program is distributed in the hope that it will be useful,
// *  but WITHOUT ANY WARRANTY; without even the implied warranty of
// *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// *  GNU General Public License for more details.
// *
// *  You should have recieved a copy of the GNU General Public License
// *  along with this program; see the file COPYING.
// *  If not, write to the Free Software Foundation, Inc.,
// *  59 Temple Place - Suite 330, Bostom, MA 02111-1307, USA.
// *
// *  (c) 2020 ergo720
// *
// *  All rights reserved
// *
// ******************************************************************

namespace xboxkrnl
{
#include <xboxkrnl/xboxkrnl.h>
};
#include "CPUDevice.h"


// hook table for the kernel thunks
const hook CxbxKrnl_KernelHookTable[KERNEL_EXPORTS_NB] =
{
	{},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::PTR}, "AvGetSavedDataAddress", &xboxkrnl::AvGetSavedDataAddress }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::I32,arg_types::I32,arg_types::I32},
	"AvSendTVEncoderOption", &xboxkrnl::AvSendTVEncoderOption }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::I32,arg_types::I32,
	arg_types::PTR,arg_types::I32,}, "AvSetDisplayMode", &xboxkrnl::AvSetDisplayMode }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "AvSetSavedDataAddress", &xboxkrnl::AvSetSavedDataAddress }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY}, "DbgBreakPoint", &xboxkrnl::DbgBreakPoint }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::I32}, "DbgBreakPointWithStatus", &xboxkrnl::DbgBreakPointWithStatus }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I32}, "DbgLoadImageSymbols", &xboxkrnl::DbgLoadImageSymbols }},
	{call_conv::X86_CDECL, call_conv::X86_CDECL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "DbgPrint", &xboxkrnl::DbgPrint }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "HalReadSMCTrayState", &xboxkrnl::HalReadSMCTrayState }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I32}, "DbgPrompt", &xboxkrnl::DbgPrompt }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR,arg_types::I32}, "DbgUnLoadImageSymbols", &xboxkrnl::DbgUnLoadImageSymbols }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "ExAcquireReadWriteLockExclusive", &xboxkrnl::ExAcquireReadWriteLockExclusive }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::PTR}, "ExAcquireReadWriteLockShared", &xboxkrnl::ExAcquireReadWriteLockShared }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::I32}, "ExAllocatePool", &xboxkrnl::ExAllocatePool }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::I32,arg_types::I32}, "ExAllocatePoolWithTag", &xboxkrnl::ExAllocatePoolWithTag }},
	{},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "ExFreePool", &xboxkrnl::ExFreePool }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "ExInitializeReadWriteLock", &xboxkrnl::ExInitializeReadWriteLock }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I64,arg_types::PTR,arg_types::I64,arg_types::PTR}, "ExInterlockedAddLargeInteger", &xboxkrnl::ExInterlockedAddLargeInteger }},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::I32}, "ExInterlockedAddLargeStatistic", &xboxkrnl::ExInterlockedAddLargeStatistic }},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::I64,arg_types::PTR,arg_types::PTR,arg_types::PTR}, "ExInterlockedCompareExchange64", &xboxkrnl::ExInterlockedCompareExchange64 }},
	{},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "ExQueryPoolBlockSize", &xboxkrnl::ExQueryPoolBlockSize }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::PTR},
	"ExQueryNonVolatileSetting", &xboxkrnl::ExQueryNonVolatileSetting }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::I8}, "ExReadWriteRefurbInfo", &xboxkrnl::ExReadWriteRefurbInfo }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "ExRaiseException", &xboxkrnl::ExRaiseException }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::I32}, "ExRaiseStatus", &xboxkrnl::ExRaiseStatus }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "ExReleaseReadWriteLock", &xboxkrnl::ExReleaseReadWriteLock }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::I32,arg_types::I32,arg_types::PTR,arg_types::I32}, "ExSaveNonVolatileSetting", &xboxkrnl::ExSaveNonVolatileSetting }},
	{},
	{},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::PTR,arg_types::PTR}, "ExfInterlockedInsertHeadList", &xboxkrnl::ExfInterlockedInsertHeadList }},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::PTR,arg_types::PTR}, "ExfInterlockedInsertTailList", &xboxkrnl::ExfInterlockedInsertTailList }},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::PTR}, "ExfInterlockedRemoveHeadList", &xboxkrnl::ExfInterlockedRemoveHeadList }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32}, "FscGetCacheSize", &xboxkrnl::FscGetCacheSize }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY}, "FscInvalidateIdleBlocks", &xboxkrnl::FscInvalidateIdleBlocks }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::I32}, "FscSetCacheSize", &xboxkrnl::FscSetCacheSize }},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::I8}, "HalClearSoftwareInterrupt", &xboxkrnl::HalClearSoftwareInterrupt }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::I32}, "HalDisableSystemInterrupt", &xboxkrnl::HalDisableSystemInterrupt }},
	{},
	{},
	{},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::I32,arg_types::I32}, "HalEnableSystemInterrupt", &xboxkrnl::HalEnableSystemInterrupt }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::I32,arg_types::PTR}, "HalGetInterruptVector", &xboxkrnl::HalGetInterruptVector }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::I8,arg_types::I8,arg_types::I8,arg_types::PTR}, "HalReadSMBusValue", &xboxkrnl::HalReadSMBusValue }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::I32,arg_types::I32,arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::I8},
	"HalReadWritePCISpace", &xboxkrnl::HalReadWritePCISpace }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::I8}, "HalRegisterShutdownNotification", &xboxkrnl::HalRegisterShutdownNotification }},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::I8}, "HalRequestSoftwareInterrupt", &xboxkrnl::HalRequestSoftwareInterrupt }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::I32}, "HalReturnToFirmware", &xboxkrnl::HalReturnToFirmware }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::I8,arg_types::I8,arg_types::I8,arg_types::I32}, "HalWriteSMBusValue", &xboxkrnl::HalWriteSMBusValue }},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::I32,arg_types::I32,arg_types::I32,arg_types::I32}, "KRNLInterlockedCompareExchange", &xboxkrnl::KRNL(InterlockedCompareExchange) }},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "KRNLInterlockedDecrement", &xboxkrnl::KRNL(InterlockedDecrement) }},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "KRNLInterlockedIncrement", &xboxkrnl::KRNL(InterlockedIncrement) }},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32}, "KRNLInterlockedExchange", &xboxkrnl::KRNL(InterlockedExchange) }},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32}, "KRNLInterlockedExchangeAdd", &xboxkrnl::KRNL(InterlockedExchangeAdd) }},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::PTR}, "KRNLInterlockedFlushSList", &xboxkrnl::KRNL(InterlockedFlushSList) }},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::PTR}, "KRNLInterlockedPopEntrySList", &xboxkrnl::KRNL(InterlockedPopEntrySList) }},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::PTR,arg_types::PTR,}, "KRNLInterlockedPushEntrySList", &xboxkrnl::KRNL(InterlockedPushEntrySList) }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::I8}, "IoAllocateIrp", &xboxkrnl::IoAllocateIrp }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::PTR,arg_types::PTR,},
	"IoBuildAsynchronousFsdRequest", &xboxkrnl::IoBuildAsynchronousFsdRequest }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::I8,arg_types::PTR,arg_types::PTR},
	"IoBuildDeviceIoControlRequest", &xboxkrnl::IoBuildDeviceIoControlRequest }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR},
	"IoBuildSynchronousFsdRequest", &xboxkrnl::IoBuildSynchronousFsdRequest }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::I32,arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I8}, "IoCheckShareAccess", &xboxkrnl::IoCheckShareAccess }},
	{},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::I8,arg_types::PTR2}, "IoCreateDevice", &xboxkrnl::IoCreateDevice }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR2,arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::I32,arg_types::I32,arg_types::I32,arg_types::I32},
	"IoCreateFile", &xboxkrnl::IoCreateFile }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "IoCreateSymbolicLink", &xboxkrnl::IoCreateSymbolicLink }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "IoDeleteDevice", &xboxkrnl::IoDeleteDevice }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "IoDeleteSymbolicLink", &xboxkrnl::IoDeleteSymbolicLink }},
	{},
	{},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "IoFreeIrp", &xboxkrnl::IoFreeIrp }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::PTR,arg_types::I16,arg_types::I8,}, "IoInitializeIrp", &xboxkrnl::IoInitializeIrp }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "IoInvalidDeviceRequest", &xboxkrnl::IoInvalidDeviceRequest }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::I32,arg_types::PTR,arg_types::PTR}, "IoQueryFileInformation", &xboxkrnl::IoQueryFileInformation }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::I32,arg_types::PTR,arg_types::PTR}, "IoQueryVolumeInformation", &xboxkrnl::IoQueryVolumeInformation }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "IoQueueThreadIrp", &xboxkrnl::IoQueueThreadIrp }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR}, "IoRemoveShareAccess", &xboxkrnl::IoRemoveShareAccess }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::I32}, "IoSetIoCompletion", &xboxkrnl::IoSetIoCompletion }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::I32,arg_types::I32,arg_types::PTR,arg_types::PTR}, "IoSetShareAccess", &xboxkrnl::IoSetShareAccess }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "IoStartNextPacket", &xboxkrnl::IoStartNextPacket }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::I32}, "IoStartNextPacketByKey", &xboxkrnl::IoStartNextPacketByKey }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR,arg_types::PTR}, "IoStartPacket", &xboxkrnl::IoStartPacket }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::PTR,arg_types::I8},
	"IoSynchronousDeviceIoControlRequest", &xboxkrnl::IoSynchronousDeviceIoControlRequest }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::PTR}, "IoSynchronousFsdRequest", &xboxkrnl::IoSynchronousFsdRequest }},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "IofCallDriver", &xboxkrnl::IofCallDriver }},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::I8}, "IofCompleteRequest", &xboxkrnl::IofCompleteRequest }},
	{},
	{},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "IoDismountVolume", &xboxkrnl::IoDismountVolume }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "IoDismountVolumeByName", &xboxkrnl::IoDismountVolumeByName }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "KeAlertResumeThread", &xboxkrnl::KeAlertResumeThread }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "KeAlertThread", &xboxkrnl::KeAlertThread }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32}, "KeBoostPriorityThread", &xboxkrnl::KeBoostPriorityThread }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::I32}, "KeBugCheck", &xboxkrnl::KeBugCheck }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR}, "KeBugCheckEx", &xboxkrnl::KeBugCheckEx }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::PTR}, "KeCancelTimer", &xboxkrnl::KeCancelTimer }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::PTR}, "KeConnectInterrupt", &xboxkrnl::KeConnectInterrupt }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::I8,arg_types::I8,arg_types::PTR}, "KeDelayExecutionThread", &xboxkrnl::KeDelayExecutionThread }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "KeDisconnectInterrupt", &xboxkrnl::KeDisconnectInterrupt }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY}, "KeEnterCriticalRegion", &xboxkrnl::KeEnterCriticalRegion }},
	{},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8}, "KeGetCurrentIrql", &xboxkrnl::KeGetCurrentIrql }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::PTR}, "KeGetCurrentThread", &xboxkrnl::KeGetCurrentThread }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::I8,arg_types::PTR},
	"KeInitializeApc", &xboxkrnl::KeInitializeApc }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "KeInitializeDeviceQueue", &xboxkrnl::KeInitializeDeviceQueue }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR,arg_types::PTR}, "KeInitializeDpc", &xboxkrnl::KeInitializeDpc }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::I32,arg_types::I8}, "KeInitializeEvent", &xboxkrnl::KeInitializeEvent }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::I8,arg_types::I32,arg_types::I8},
	"KeInitializeInterrupt", &xboxkrnl::KeInitializeInterrupt }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::I8}, "KeInitializeMutant", &xboxkrnl::KeInitializeMutant }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::I32}, "KeInitializeQueue", &xboxkrnl::KeInitializeQueue }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::I32,arg_types::I32}, "KeInitializeSemaphore", &xboxkrnl::KeInitializeSemaphore }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::I32}, "KeInitializeTimerEx", &xboxkrnl::KeInitializeTimerEx }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::PTR,arg_types::PTR,arg_types::I32}, "KeInsertByKeyDeviceQueue", &xboxkrnl::KeInsertByKeyDeviceQueue }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::PTR,arg_types::PTR}, "KeInsertDeviceQueue", &xboxkrnl::KeInsertDeviceQueue }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "KeInsertHeadQueue", &xboxkrnl::KeInsertHeadQueue }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "KeInsertQueue", &xboxkrnl::KeInsertQueue }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::I32}, "KeInsertQueueApc", &xboxkrnl::KeInsertQueueApc }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::PTR,arg_types::PTR,arg_types::PTR}, "KeInsertQueueDpc", &xboxkrnl::KeInsertQueueDpc }},
	{},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8}, "KeIsExecutingDpc", &xboxkrnl::KeIsExecutingDpc }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY}, "KeLeaveCriticalRegion", &xboxkrnl::KeLeaveCriticalRegion }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::I8}, "KePulseEvent", &xboxkrnl::KePulseEvent }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "KeQueryBasePriorityThread", &xboxkrnl::KeQueryBasePriorityThread }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I64}, "KeQueryInterruptTime", &xboxkrnl::KeQueryInterruptTime }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I64}, "KeQueryPerformanceCounter", &xboxkrnl::KeQueryPerformanceCounter }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I64}, "KeQueryPerformanceFrequency", &xboxkrnl::KeQueryPerformanceFrequency }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "KeQuerySystemTime", &xboxkrnl::KeQuerySystemTime }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8}, "KeRaiseIrqlToDpcLevel", &xboxkrnl::KeRaiseIrqlToDpcLevel }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8}, "KeRaiseIrqlToSynchLevel", &xboxkrnl::KeRaiseIrqlToSynchLevel }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::I8,arg_types::I8}, "KeReleaseMutant", &xboxkrnl::KeReleaseMutant }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::I32,arg_types::I8}, "KeReleaseSemaphore", &xboxkrnl::KeReleaseSemaphore }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::PTR,arg_types::I32}, "KeRemoveByKeyDeviceQueue", &xboxkrnl::KeRemoveByKeyDeviceQueue }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::PTR}, "KeRemoveDeviceQueue", &xboxkrnl::KeRemoveDeviceQueue }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::PTR,arg_types::PTR}, "KeRemoveEntryDeviceQueue", &xboxkrnl::KeRemoveEntryDeviceQueue }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::PTR,arg_types::I8,arg_types::PTR}, "KeRemoveQueue", &xboxkrnl::KeRemoveQueue }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::PTR}, "KeRemoveQueueDpc", &xboxkrnl::KeRemoveQueueDpc }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "KeResetEvent", &xboxkrnl::KeResetEvent }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "KeRestoreFloatingPointState", &xboxkrnl::KeRestoreFloatingPointState }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "KeResumeThread", &xboxkrnl::KeResumeThread }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::PTR}, "KeRundownQueue", &xboxkrnl::KeRundownQueue }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "KeSaveFloatingPointState", &xboxkrnl::KeSaveFloatingPointState }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32}, "KeSetBasePriorityThread", &xboxkrnl::KeSetBasePriorityThread }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32}, "KeSetDisableBoostThread", &xboxkrnl::KeSetDisableBoostThread }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::I8}, "KeSetEvent", &xboxkrnl::KeSetEvent }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR2}, "KeSetEventBoostPriority", &xboxkrnl::KeSetEventBoostPriority }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32}, "KeSetPriorityProcess", &xboxkrnl::KeSetPriorityProcess }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::PTR,arg_types::I32}, "KeSetPriorityThread", &xboxkrnl::KeSetPriorityThread }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::PTR,arg_types::I64,arg_types::PTR}, "KeSetTimer", &xboxkrnl::KeSetTimer }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::PTR,arg_types::I64,arg_types::I32,arg_types::PTR}, "KeSetTimerEx", &xboxkrnl::KeSetTimerEx }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::I32}, "KeStallExecutionProcessor", &xboxkrnl::KeStallExecutionProcessor }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "KeSuspendThread", &xboxkrnl::KeSuspendThread }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::PTR,arg_types::PTR,arg_types::PTR}, "KeSynchronizeExecution", &xboxkrnl::KeSynchronizeExecution }},
	{},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::I8}, "KeTestAlertThread", &xboxkrnl::KeTestAlertThread }},
	{},
	{},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::I32,arg_types::I8,arg_types::I8,arg_types::PTR,arg_types::PTR},
	"KeWaitForMultipleObjects", &xboxkrnl::KeWaitForMultipleObjects }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::I8,arg_types::I8,arg_types::PTR},
	"KeWaitForSingleObject", &xboxkrnl::KeWaitForSingleObject }},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::I8,arg_types::I8}, "KfRaiseIrql", &xboxkrnl::KfRaiseIrql }},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::I8}, "KfLowerIrql", &xboxkrnl::KfLowerIrql }},
	{},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::I8}, "KiUnlockDispatcherDatabase", &xboxkrnl::KiUnlockDispatcherDatabase }},
	{},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::I32}, "MmAllocateContiguousMemory", &xboxkrnl::MmAllocateContiguousMemory }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::I32,arg_types::I32,arg_types::I32,arg_types::I32,arg_types::I32},
	"MmAllocateContiguousMemoryEx", &xboxkrnl::MmAllocateContiguousMemoryEx }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::I32,arg_types::I32}, "MmAllocateSystemMemory", &xboxkrnl::MmAllocateSystemMemory }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::I32,arg_types::PTR}, "MmClaimGpuInstanceMemory", &xboxkrnl::MmClaimGpuInstanceMemory }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::I32,arg_types::I8}, "MmCreateKernelStack", &xboxkrnl::MmCreateKernelStack }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR}, "MmDeleteKernelStack", &xboxkrnl::MmDeleteKernelStack }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "MmFreeContiguousMemory", &xboxkrnl::MmFreeContiguousMemory }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32}, "MmFreeSystemMemory", &xboxkrnl::MmFreeSystemMemory }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "MmGetPhysicalAddress", &xboxkrnl::MmGetPhysicalAddress }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::PTR}, "MmIsAddressValid", &xboxkrnl::MmIsAddressValid }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::I32,arg_types::I8}, "MmLockUnlockBufferPages", &xboxkrnl::MmLockUnlockBufferPages }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::I32,arg_types::I8}, "MmLockUnlockPhysicalPage", &xboxkrnl::MmLockUnlockPhysicalPage }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::I32,arg_types::I32,arg_types::I32}, "MmMapIoSpace", &xboxkrnl::MmMapIoSpace }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::I32,arg_types::I8}, "MmPersistContiguousMemory", &xboxkrnl::MmPersistContiguousMemory }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "MmQueryAddressProtect", &xboxkrnl::MmQueryAddressProtect }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "MmQueryAllocationSize", &xboxkrnl::MmQueryAllocationSize }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "MmQueryStatistics", &xboxkrnl::MmQueryStatistics }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::I32,arg_types::I32}, "MmSetAddressProtect", &xboxkrnl::MmSetAddressProtect }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::I32}, "MmUnmapIoSpace", &xboxkrnl::MmUnmapIoSpace }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR2,arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::I32},
	"NtAllocateVirtualMemory", &xboxkrnl::NtAllocateVirtualMemory }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "NtCancelTimer", &xboxkrnl::NtCancelTimer }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "NtClearEvent", &xboxkrnl::NtClearEvent }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "NtClose", &xboxkrnl::NtClose }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR2,arg_types::PTR}, "NtCreateDirectoryObject", &xboxkrnl::NtCreateDirectoryObject }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR2,arg_types::PTR,arg_types::I32,arg_types::I8}, "NtCreateEvent", &xboxkrnl::NtCreateEvent }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR2,arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::I32,arg_types::I32,arg_types::I32},
	"NtCreateFile", &xboxkrnl::NtCreateFile }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR2,arg_types::I32,arg_types::PTR,arg_types::I32}, "NtCreateIoCompletion", &xboxkrnl::NtCreateIoCompletion }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR2,arg_types::PTR,arg_types::I8}, "NtCreateMutant", &xboxkrnl::NtCreateMutant }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR2,arg_types::PTR,arg_types::I32,arg_types::I32}, "NtCreateSemaphore", &xboxkrnl::NtCreateSemaphore }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR2,arg_types::PTR,arg_types::I32}, "NtCreateTimer", &xboxkrnl::NtCreateTimer }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "NtDeleteFile", &xboxkrnl::NtDeleteFile }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::PTR,arg_types::I32},
	"NtDeviceIoControlFile", &xboxkrnl::NtDeviceIoControlFile }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR2,arg_types::I32}, "NtDuplicateObject", &xboxkrnl::NtDuplicateObject }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "NtFlushBuffersFile", &xboxkrnl::NtFlushBuffersFile }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR2,arg_types::PTR,arg_types::I32}, "NtFreeVirtualMemory", &xboxkrnl::NtFreeVirtualMemory }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::PTR,arg_types::I32},
	"NtFsControlFile", &xboxkrnl::NtFsControlFile }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR2,arg_types::PTR}, "NtOpenDirectoryObject", &xboxkrnl::NtOpenDirectoryObject }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR2,arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::I32}, "NtOpenFile", &xboxkrnl::NtOpenFile }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR2,arg_types::PTR}, "NtOpenSymbolicLinkObject", &xboxkrnl::NtOpenSymbolicLinkObject }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR2,arg_types::PTR,arg_types::I32,arg_types::PTR}, "NtProtectVirtualMemory", &xboxkrnl::NtProtectVirtualMemory }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "NtPulseEvent", &xboxkrnl::NtPulseEvent }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::I32}, "NtQueueApcThread", &xboxkrnl::NtQueueApcThread }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::I32,arg_types::PTR,arg_types::I8},
	"NtQueryDirectoryFile", &xboxkrnl::NtQueryDirectoryFile }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::I8,arg_types::PTR,arg_types::PTR}, "NtQueryDirectoryObject", &xboxkrnl::NtQueryDirectoryObject }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "NtQueryEvent", &xboxkrnl::NtQueryEvent }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "NtQueryFullAttributesFile", &xboxkrnl::NtQueryFullAttributesFile }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::I32}, "NtQueryInformationFile", &xboxkrnl::NtQueryInformationFile }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "NtQueryIoCompletion", &xboxkrnl::NtQueryIoCompletion }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "NtQueryMutant", &xboxkrnl::NtQueryMutant }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "NtQuerySemaphore", &xboxkrnl::NtQuerySemaphore }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR}, "NtQuerySymbolicLinkObject", &xboxkrnl::NtQuerySymbolicLinkObject }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "NtQueryTimer", &xboxkrnl::NtQueryTimer }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "NtQueryVirtualMemory", &xboxkrnl::NtQueryVirtualMemory }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::I32}, "NtQueryVolumeInformationFile", &xboxkrnl::NtQueryVolumeInformationFile }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::PTR},
	"NtReadFile", &xboxkrnl::NtReadFile }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::PTR},
	"NtReadFileScatter", &xboxkrnl::NtReadFileScatter }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "NtReleaseMutant", &xboxkrnl::NtReleaseMutant }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::PTR}, "NtReleaseSemaphore", &xboxkrnl::NtReleaseSemaphore }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR2,arg_types::PTR2,arg_types::PTR,arg_types::PTR}, "NtRemoveIoCompletion", &xboxkrnl::NtRemoveIoCompletion }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "NtResumeThread", &xboxkrnl::NtResumeThread }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "NtSetEvent", &xboxkrnl::NtSetEvent }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::I32}, "NtSetInformationFile", &xboxkrnl::NtSetInformationFile }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::I32}, "NtSetIoCompletion", &xboxkrnl::NtSetIoCompletion }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "NtSetSystemTime", &xboxkrnl::NtSetSystemTime }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::I8,arg_types::PTR,arg_types::I8,arg_types::I32,arg_types::PTR},
	"NtSetTimerEx", &xboxkrnl::NtSetTimerEx }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I8,arg_types::I8,arg_types::PTR}, "NtSignalAndWaitForSingleObjectEx", &xboxkrnl::NtSignalAndWaitForSingleObjectEx }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "NtSuspendThread", &xboxkrnl::NtSuspendThread }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR,arg_types::I32}, "NtUserIoApcDispatcher", &xboxkrnl::NtUserIoApcDispatcher }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I8,arg_types::PTR}, "NtWaitForSingleObject", &xboxkrnl::NtWaitForSingleObject }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I8,arg_types::I8,arg_types::PTR}, "NtWaitForSingleObjectEx", &xboxkrnl::NtWaitForSingleObjectEx }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::I8,arg_types::I8,arg_types::PTR}, "NtWaitForMultipleObjectsEx", &xboxkrnl::NtWaitForMultipleObjectsEx }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::PTR},
	"NtWriteFile", &xboxkrnl::NtWriteFile }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::PTR},
	"NtWriteFileGather", &xboxkrnl::NtWriteFileGather }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY}, "NtYieldExecution", &xboxkrnl::NtYieldExecution }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::PTR}, "ObCreateObject", &xboxkrnl::ObCreateObject }},
	{},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::PTR2}, "ObInsertObject", &xboxkrnl::ObInsertObject }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "ObMakeTemporaryObject", &xboxkrnl::ObMakeTemporaryObject }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR2}, "ObOpenObjectByName", &xboxkrnl::ObOpenObjectByName }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR2}, "ObOpenObjectByPointer", &xboxkrnl::ObOpenObjectByPointer }},
	{},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR2}, "ObReferenceObjectByHandle", &xboxkrnl::ObReferenceObjectByHandle }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR2}, "ObReferenceObjectByName", &xboxkrnl::ObReferenceObjectByName }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "ObReferenceObjectByPointer", &xboxkrnl::ObReferenceObjectByPointer }},
	{},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "ObfDereferenceObject", &xboxkrnl::ObfDereferenceObject }},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "ObfReferenceObject", &xboxkrnl::ObfReferenceObject }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::I32}, "PhyGetLinkState", &xboxkrnl::PhyGetLinkState }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::I32,arg_types::PTR}, "PhyInitialize", &xboxkrnl::PhyInitialize }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR2,arg_types::PTR2,arg_types::PTR,arg_types::PTR,arg_types::I8}, "PsCreateSystemThread", &xboxkrnl::PsCreateSystemThread }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR2,arg_types::I32,arg_types::I32,arg_types::I32,arg_types::PTR2,arg_types::PTR,arg_types::PTR,arg_types::I8,arg_types::I8,arg_types::PTR},
	"PsCreateSystemThreadEx", &xboxkrnl::PsCreateSystemThreadEx }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "PsQueryStatistics", &xboxkrnl::PsQueryStatistics }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "PsSetCreateThreadNotifyRoutine", &xboxkrnl::PsSetCreateThreadNotifyRoutine }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::I32}, "PsTerminateSystemThread", &xboxkrnl::PsTerminateSystemThread }},
	{},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I8}, "RtlAnsiStringToUnicodeString", &xboxkrnl::RtlAnsiStringToUnicodeString }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "RtlAppendStringToString", &xboxkrnl::RtlAppendStringToString }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "RtlAppendUnicodeStringToString", &xboxkrnl::RtlAppendUnicodeStringToString }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "RtlAppendUnicodeToString", &xboxkrnl::RtlAppendUnicodeToString }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::PTR}, "RtlAssert", &xboxkrnl::RtlAssert }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "RtlCaptureContext", &xboxkrnl::RtlCaptureContext }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I16,arg_types::I32,arg_types::I32,arg_types::PTR2,arg_types::PTR}, "RtlCaptureStackBackTrace", &xboxkrnl::RtlCaptureStackBackTrace }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::PTR}, "RtlCharToInteger", &xboxkrnl::RtlCharToInteger }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I32}, "RtlCompareMemory", &xboxkrnl::RtlCompareMemory }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::I32}, "RtlCompareMemoryUlong", &xboxkrnl::RtlCompareMemoryUlong }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I8}, "RtlCompareString", &xboxkrnl::RtlCompareString }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I8}, "RtlCompareUnicodeString", &xboxkrnl::RtlCompareUnicodeString }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR}, "RtlCopyString", &xboxkrnl::RtlCopyString }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR}, "RtlCopyUnicodeString", &xboxkrnl::RtlCopyUnicodeString }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::PTR,arg_types::PTR}, "RtlCreateUnicodeString", &xboxkrnl::RtlCreateUnicodeString }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I16,arg_types::I16}, "RtlDowncaseUnicodeChar", &xboxkrnl::RtlDowncaseUnicodeChar }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I8}, "RtlDowncaseUnicodeString", &xboxkrnl::RtlDowncaseUnicodeString }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "RtlEnterCriticalSection", &xboxkrnl::RtlEnterCriticalSection }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "RtlEnterCriticalSectionAndRegion", &xboxkrnl::RtlEnterCriticalSectionAndRegion }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::PTR,arg_types::PTR,arg_types::I8}, "RtlEqualString", &xboxkrnl::RtlEqualString }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::PTR,arg_types::PTR,arg_types::I8}, "RtlEqualUnicodeString", &xboxkrnl::RtlEqualUnicodeString }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I64,arg_types::I64,arg_types::I32}, "RtlExtendedIntegerMultiply", &xboxkrnl::RtlExtendedIntegerMultiply }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I64,arg_types::I64,arg_types::I32,arg_types::PTR}, "RtlExtendedLargeIntegerDivide", &xboxkrnl::RtlExtendedLargeIntegerDivide }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I64,arg_types::I64,arg_types::I64,arg_types::I8}, "RtlExtendedMagicDivide", &xboxkrnl::RtlExtendedMagicDivide }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::I32,arg_types::I8}, "RtlFillMemory", &xboxkrnl::RtlFillMemory }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::I32,arg_types::I32}, "RtlFillMemoryUlong", &xboxkrnl::RtlFillMemoryUlong }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "RtlFreeAnsiString", &xboxkrnl::RtlFreeAnsiString }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "RtlFreeUnicodeString", &xboxkrnl::RtlFreeUnicodeString }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR2,arg_types::PTR2}, "RtlGetCallersAddress", &xboxkrnl::RtlGetCallersAddress }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR}, "RtlInitAnsiString", &xboxkrnl::RtlInitAnsiString }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR}, "RtlInitUnicodeString", &xboxkrnl::RtlInitUnicodeString }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "RtlInitializeCriticalSection", &xboxkrnl::RtlInitializeCriticalSection }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::I32,arg_types::I32,arg_types::I32,arg_types::PTR}, "RtlIntegerToChar", &xboxkrnl::RtlIntegerToChar }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::I32,arg_types::I32,arg_types::PTR}, "RtlIntegerToUnicodeString", &xboxkrnl::RtlIntegerToUnicodeString }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "RtlLeaveCriticalSection", &xboxkrnl::RtlLeaveCriticalSection }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "RtlLeaveCriticalSectionAndRegion", &xboxkrnl::RtlLeaveCriticalSectionAndRegion }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::I8}, "RtlLowerChar", &xboxkrnl::RtlLowerChar }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR}, "RtlMapGenericMask", &xboxkrnl::RtlMapGenericMask }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR,arg_types::I32}, "RtlMoveMemory", &xboxkrnl::RtlMoveMemory }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I32}, "RtlMultiByteToUnicodeN", &xboxkrnl::RtlMultiByteToUnicodeN }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I32}, "RtlMultiByteToUnicodeSize", &xboxkrnl::RtlMultiByteToUnicodeSize }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::I32}, "RtlNtStatusToDosError", &xboxkrnl::RtlNtStatusToDosError }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "RtlRaiseException", &xboxkrnl::RtlRaiseException }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::I32}, "RtlRaiseStatus", &xboxkrnl::RtlRaiseStatus }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::PTR,arg_types::PTR}, "RtlTimeFieldsToTime", &xboxkrnl::RtlTimeFieldsToTime }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR}, "RtlTimeToTimeFields", &xboxkrnl::RtlTimeToTimeFields }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::PTR}, "RtlTryEnterCriticalSection", &xboxkrnl::RtlTryEnterCriticalSection }},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::I32,arg_types::I32}, "RtlUlongByteSwap", &xboxkrnl::RtlUlongByteSwap }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I8}, "RtlUnicodeStringToAnsiString", &xboxkrnl::RtlUnicodeStringToAnsiString }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::PTR}, "RtlUnicodeStringToInteger", &xboxkrnl::RtlUnicodeStringToInteger }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I32}, "RtlUnicodeToMultiByteN", &xboxkrnl::RtlUnicodeToMultiByteN }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I32}, "RtlUnicodeToMultiByteSize", &xboxkrnl::RtlUnicodeToMultiByteSize }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR}, "RtlUnwind", &xboxkrnl::RtlUnwind }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I16,arg_types::I16}, "RtlUpcaseUnicodeChar", &xboxkrnl::RtlUpcaseUnicodeChar }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I8}, "RtlUpcaseUnicodeString", &xboxkrnl::RtlUpcaseUnicodeString }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::I32}, "RtlUpcaseUnicodeToMultiByteN", &xboxkrnl::RtlUpcaseUnicodeToMultiByteN }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::I8}, "RtlUpperChar", &xboxkrnl::RtlUpperChar }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR}, "RtlUpperString", &xboxkrnl::RtlUpperString }},
	{call_conv::X86_FASTCALL, call_conv::X86_FASTCALL, { std::vector<arg_types>{arg_types::I16,arg_types::I16}, "RtlUshortByteSwap", &xboxkrnl::RtlUshortByteSwap }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR2,arg_types::I32,arg_types::I32}, "RtlWalkFrameChain", &xboxkrnl::RtlWalkFrameChain }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::I32}, "RtlZeroMemory", &xboxkrnl::RtlZeroMemory }},
	{},
	{},
	{},
	{},
	{},
	{},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "XeLoadSection", &xboxkrnl::XeLoadSection }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "XeUnloadSection", &xboxkrnl::XeUnloadSection }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR,arg_types::I32}, "READ_PORT_BUFFER_UCHAR", &xboxkrnl::READ_PORT_BUFFER_UCHAR }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR,arg_types::I32}, "READ_PORT_BUFFER_USHORT", &xboxkrnl::READ_PORT_BUFFER_USHORT }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR,arg_types::I32}, "READ_PORT_BUFFER_ULONG", &xboxkrnl::READ_PORT_BUFFER_ULONG }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR,arg_types::I32}, "WRITE_PORT_BUFFER_UCHAR", &xboxkrnl::WRITE_PORT_BUFFER_UCHAR }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR,arg_types::I32}, "WRITE_PORT_BUFFER_USHORT", &xboxkrnl::WRITE_PORT_BUFFER_USHORT }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR,arg_types::I32}, "WRITE_PORT_BUFFER_ULONG", &xboxkrnl::WRITE_PORT_BUFFER_ULONG }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR}, "XcSHAInit", &xboxkrnl::XcSHAInit }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR,arg_types::I32}, "XcSHAUpdate", &xboxkrnl::XcSHAUpdate }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR}, "XcSHAFinal", &xboxkrnl::XcSHAFinal }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::I32,arg_types::PTR}, "XcRC4Key", &xboxkrnl::XcRC4Key }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::I32,arg_types::PTR}, "XcRC4Crypt", &xboxkrnl::XcRC4Crypt }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::PTR},
	"XcHMAC", &xboxkrnl::XcHMAC }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR}, "XcPKEncPublic", &xboxkrnl::XcPKEncPublic }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR}, "XcPKDecPrivate", &xboxkrnl::XcPKDecPrivate }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR}, "XcPKGetKeyLen", &xboxkrnl::XcPKGetKeyLen }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::PTR,arg_types::PTR,arg_types::PTR}, "XcVerifyPKCS1Signature", &xboxkrnl::XcVerifyPKCS1Signature }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::I32}, "XcModExp", &xboxkrnl::XcModExp }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::I32}, "XcDESKeyParity", &xboxkrnl::XcDESKeyParity }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::I32,arg_types::PTR,arg_types::PTR}, "XcKeyTable", &xboxkrnl::XcKeyTable }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::I32}, "XcBlockCrypt", &xboxkrnl::XcBlockCrypt }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::I32,arg_types::I32,arg_types::PTR,arg_types::PTR,arg_types::PTR,arg_types::I32,arg_types::PTR},
	"XcBlockCryptCBC", &xboxkrnl::XcBlockCryptCBC }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::I32,arg_types::PTR}, "XcCryptService", &xboxkrnl::XcCryptService }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR}, "XcUpdateCrypto", &xboxkrnl::XcUpdateCrypto }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR,arg_types::PTR}, "RtlRip", &xboxkrnl::RtlRip }},
	{},
	{},
	{},
	{},
	{},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8}, "HalIsResetOrShutdownPending", &xboxkrnl::HalIsResetOrShutdownPending }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I8,arg_types::PTR}, "IoMarkIrpMustComplete", &xboxkrnl::IoMarkIrpMustComplete }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32}, "HalInitiateShutdown", &xboxkrnl::HalInitiateShutdown }},
	{call_conv::X86_CDECL, call_conv::X86_CDECL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::PTR}, "RtlSnprintf", &xboxkrnl::RtlSnprintf }},
	{call_conv::X86_CDECL, call_conv::X86_CDECL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "RtlSprintf", &xboxkrnl::RtlSprintf }},
	{call_conv::X86_CDECL, call_conv::X86_CDECL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32,arg_types::PTR}, "RtlVsnprintf", &xboxkrnl::RtlVsnprintf }},
	{call_conv::X86_CDECL, call_conv::X86_CDECL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::PTR}, "RtlVsprintf", &xboxkrnl::RtlVsprintf }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY}, "HalEnableSecureTrayEject", &xboxkrnl::HalEnableSecureTrayEject }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::I32}, "HalWriteSMCScratchRegister", &xboxkrnl::HalWriteSMCScratchRegister }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32}, "UnknownAPI367", &xboxkrnl::UnknownAPI367 }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32}, "UnknownAPI368", &xboxkrnl::UnknownAPI368 }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32}, "UnknownAPI369", &xboxkrnl::UnknownAPI369 }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::I32,arg_types::I32}, "XProfpControl", &xboxkrnl::XProfpControl }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32}, "XProfpGetData", &xboxkrnl::XProfpGetData }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32}, "IrtClientInitFast", &xboxkrnl::IrtClientInitFast }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32}, "IrtSweep", &xboxkrnl::IrtSweep }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::I32,arg_types::I32}, "MmDbgAllocateMemory", &xboxkrnl::MmDbgAllocateMemory }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32,arg_types::PTR,arg_types::I32}, "MmDbgFreeMemory", &xboxkrnl::MmDbgFreeMemory }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::I32}, "MmDbgQueryAvailablePages", &xboxkrnl::MmDbgQueryAvailablePages }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::EMPTY,arg_types::PTR,arg_types::PTR}, "MmDbgReleaseAddress", &xboxkrnl::MmDbgReleaseAddress }},
	{call_conv::X86_STDCALL, call_conv::X86_STDCALL, { std::vector<arg_types>{arg_types::PTR,arg_types::PTR,arg_types::PTR}, "MmDbgWriteCheck", &xboxkrnl::MmDbgWriteCheck }},
};
